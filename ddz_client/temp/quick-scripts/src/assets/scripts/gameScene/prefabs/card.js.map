{"version":3,"sources":["assets/scripts/gameScene/prefabs/card.js"],"names":["cc","Class","Component","properties","cards_sprite_atlas","SpriteAtlas","onLoad","flag","offset_y","node","on","event","y","bind","runToCenter","start","init_data","data","setTouchEvent","accountid","myglobal","playerData","accountID","Node","EventType","TOUCH_START","gameScene_node","parent","room_state","getComponent","roomstate","RoomState","ROOM_PLAYING","console","log","card_id","carddata","card_data","emit","showCards","card","index","CardValue","cardShpae","Kings","spriteKey","shape","value","king","Sprite","spriteFrame","getSpriteFrame"],"mappings":"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","sourceRoot":"/","sourcesContent":["import myglobal from \"../../mygolbal.js\"\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n     cards_sprite_atlas: cc.SpriteAtlas,\n     \n    },\n\n    onLoad () {\n        this.flag = false\n        this.offset_y = 20\n        \n        this.node.on(\"reset_card_flag\",function(event){\n            if(this,flag==true){\n                this,flag = false\n                this.node.y -= this.offset_y\n            }\n        }.bind(this))\n\n        // this.node.on(\"chu_card_succ\",function(event){\n        //    var chu_card_list = event\n        //    for(var i=0;i<chu_card_list.length;i++){\n        //     if(chu_card_list[i].card_id==this.card_id){\n        //         //this.runToCenter(chu_card_list[i])\n        //         //this.node.destory()\n        //     }\n        //    }\n        // }.bind(this))\n    },\n\n    runToCenter(){\n        //移动到屏幕中间，并带一个牌缩小的效果\n    },\n    start () {\n\n    },\n\n    init_data(data){\n\n    },\n    // update (dt) {},\n    setTouchEvent(){\n        if(this.accountid==myglobal.playerData.accountID){\n            this.node.on(cc.Node.EventType.TOUCH_START,function(event){\n                var gameScene_node = this.node.parent  \n                var room_state = gameScene_node.getComponent(\"gameScene\").roomstate\n                if(room_state==RoomState.ROOM_PLAYING){\n                    console.log(\"TOUCH_START id:\"+this.card_id)\n                    if(this.flag==false){\n                        this.flag = true\n                        this.node.y += this.offset_y\n                        //通知gameui层选定的牌\n                        var carddata = {\n                            \"cardid\":this.card_id,\n                            \"card_data\":this.card_data,\n                        }\n                        gameScene_node.emit(\"choose_card_event\",carddata)\n                    }else{\n                        this.flag=false\n                        this.node.y -= this.offset_y\n                        //通知gameUI取消了那张牌\n                       gameScene_node.emit(\"unchoose_card_event\",this.card_id)\n                    }\n                }\n              \n            }.bind(this))\n        }\n       \n    },\n    showCards(card,accountid){\n        //card.index是服务器生成card给对象设置的一副牌里唯一id\n        this.card_id = card.index\n        //传入参数 card={\"value\":5,\"shape\":1,\"index\":20}\n        this.card_data = card\n        if(accountid){\n            this.accountid = accountid //标识card属于的玩家\n        }\n       \n        //this.node.getComponent(cc.Sprite).spriteFrame = \n        //服务器定义牌的表示\n        // const cardvalue = {\n        //     \"A\": 12,\n        //     \"2\": 13,\n        //     \"3\": 1,\n        //     \"4\": 2,\n        //     \"5\": 3,\n        //     \"6\": 4,\n        //     \"7\": 5,\n        //     \"8\": 6,\n        //     \"9\": 7,\n        //     \"10\": 8,\n        //     \"J\": 9,\n        //     \"Q\": 10,\n        //     \"K\": 11,\n        // }\n        \n       \n        //服务器返回的是key,value对应的是资源的编号\n        const CardValue = {\n            \"12\": 1,\n            \"13\": 2,\n            \"1\": 3,\n            \"2\": 4,\n            \"3\": 5,\n            \"4\": 6,\n            \"5\": 7,\n            \"6\": 8,\n            \"7\": 9,\n            \"8\": 10,\n            \"9\": 11,\n            \"10\": 12,\n            \"11\": 13\n        };\n\n        // 黑桃：spade\n        // 红桃：heart\n        // 梅花：club\n        // 方片：diamond\n        // const CardShape = {\n        //     \"S\": 1,\n        //     \"H\": 2,\n        //     \"C\": 3,\n        //     \"D\": 4,\n        // };\n        const cardShpae = {\n            \"1\": 3,\n            \"2\": 2,\n            \"3\": 1,\n            \"4\": 0\n        };\n        const Kings = {\n            \"14\": 54,\n            \"15\": 53\n        };\n\n        var spriteKey = '';\n        if (card.shape){\n            spriteKey = 'card_' + (cardShpae[card.shape] * 13 + CardValue[card.value]);\n\n        }else {\n            spriteKey = 'card_' + Kings[card.king];\n        }\n\n       // console.log(\"spriteKey\"+spriteKey)\n        this.node.getComponent(cc.Sprite).spriteFrame = this.cards_sprite_atlas.getSpriteFrame(spriteKey)\n        this.setTouchEvent()\n    }\n});\n\n\n"]}